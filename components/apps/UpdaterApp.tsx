import React, { useState } from 'react';
import { useAppContext } from '../../contexts/AppContext';
import { AppState } from '../../types';
import { 
    GRID_SIZE, 
    UI_TEXT, 
    XP_THEME, 
    CLASSIC_THEME, 
    DEFAULT_SETTINGS, 
    INITIAL_DESKTOP_ITEMS, 
    INITIAL_BLOG_POSTS, 
    INITIAL_BIO_DATA, 
    INITIAL_FILESYSTEM 
} from '../../constants';


const UpdaterApp: React.FC = () => {
    const { state, dispatch } = useAppContext();
    const { isAdmin } = state;
    const [jsonContent, setJsonContent] = useState<string>('');
    const [fileName, setFileName] = useState<string>('');
    const [error, setError] = useState<string>('');
    const [generatedCode, setGeneratedCode] = useState<string>('');

    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0];
        if (!file) return;

        if (file.type !== 'application/json') {
            setError('Error: Please select a valid JSON file.');
            setJsonContent('');
            setFileName('');
            setGeneratedCode('');
            return;
        }

        const reader = new FileReader();
        reader.onload = (event) => {
            try {
                const textContent = event.target?.result as string;
                // Prettify the JSON for display
                const parsed = JSON.parse(textContent);
                setJsonContent(JSON.stringify(parsed, null, 2));
                setFileName(file.name);
                setError('');
                setGeneratedCode('');
            } catch (err) {
                setError('Error: Invalid JSON format in the file.');
                setJsonContent('');
                setFileName('');
                setGeneratedCode('');
            }
        };
        reader.readAsText(file);
    };
    
    const handleApplyUpdate = () => {
        if (!jsonContent) {
            setError('Error: No content to apply.');
            return;
        }
        if (window.confirm('Are you sure you want to apply these changes? This will overwrite existing data and cannot be undone.')) {
            try {
                const parsedContent: Partial<AppState> = JSON.parse(jsonContent);
                dispatch({ type: 'APPLY_UPDATE', payload: parsedContent });
                alert('Update applied successfully. The new configuration is now active.');
            } catch (err) {
                 setError('Error: Could not apply update due to invalid JSON.');
                 alert('Update failed. Please check the JSON content.');
            }
        }
    };

    const handleGenerateCode = () => {
        if (!jsonContent) {
            setError('Error: No content to generate code from.');
            return;
        }
        try {
            const parsed: Partial<AppState> = JSON.parse(jsonContent);
            
            let codeString = `// Generated by Himera XP Updater @ ${new Date().toISOString()}\n`;
            codeString += `// You can replace the entire content of 'src/constants.ts' with the code below.\n\n`;
            
            codeString += `import { Theme, BlogEntry, SystemSettings, DesktopItem, DirectoryNode, BioData } from './types';\n\n`;

            // Non-configurable constants
            codeString += `export const GRID_SIZE = ${GRID_SIZE};\n\n`;
            codeString += `export const UI_TEXT = ${JSON.stringify(UI_TEXT, null, 2)};\n\n`;
            codeString += `export const XP_THEME: Theme = ${JSON.stringify(XP_THEME, null, 2)};\n\n`;
            codeString += `export const CLASSIC_THEME: Theme = ${JSON.stringify(CLASSIC_THEME, null, 2)};\n\n`;
            
            // Configurable constants - use from JSON or fall back to imported defaults
            const bioData = parsed.bioData || INITIAL_BIO_DATA;
            codeString += `export const INITIAL_BIO_DATA: BioData = ${JSON.stringify(bioData, null, 2)};\n\n`;

            const fileSystemData = parsed.fileSystem || INITIAL_FILESYSTEM;
            codeString += `export const INITIAL_FILESYSTEM: DirectoryNode = ${JSON.stringify(fileSystemData, null, 2)};\n\n`;

            const settingsData = parsed.settings || DEFAULT_SETTINGS;
            codeString += `export const DEFAULT_SETTINGS: SystemSettings = ${JSON.stringify(settingsData, null, 2)};\n\n`;

            const blogPostsData = parsed.blogPosts || INITIAL_BLOG_POSTS;
            codeString += `export const INITIAL_BLOG_POSTS: BlogEntry[] = ${JSON.stringify(blogPostsData, null, 2)};\n\n`;

            const desktopItemsData = parsed.desktopItems || INITIAL_DESKTOP_ITEMS;
            codeString += `export const INITIAL_DESKTOP_ITEMS: DesktopItem[] = ${JSON.stringify(desktopItemsData, null, 2)};\n`;

            setGeneratedCode(codeString);
            setError('');

        } catch (err) {
            setError('Could not generate code due to invalid JSON.');
            setGeneratedCode('');
        }
    };

    const handleCopyCode = () => {
        navigator.clipboard.writeText(generatedCode).then(() => {
            alert('Code copied to clipboard!');
        }, () => {
            alert('Failed to copy code.');
        });
    };

    if (!isAdmin) {
        return (
            <div className="flex items-center justify-center h-full bg-black text-red-500 font-display text-2xl p-4 text-center">
                ACCESS DENIED - ADMIN PRIVILEGES REQUIRED
            </div>
        );
    }
    
    const controlStyle = "bg-white border-2 border-t-gray-700 border-l-gray-700 border-b-white border-r-white p-2 w-full outline-none focus:ring-1 focus:ring-blue-500 text-black";
    const buttonStyle = "font-sans bg-[#c0c0c0] border-2 border-t-white border-l-white border-b-black border-r-black shadow-sm px-4 py-2 hover:bg-gray-300 active:border-t-black active:border-l-black active:border-b-white active:border-r-white text-black";


    return (
        <div className="p-4 h-full flex flex-col font-sans bg-[#c0c0c0] text-black overflow-y-auto custom-scrollbar">
            <h2 className="text-xl font-bold mb-2">System Data Updater</h2>
            <p className="text-sm mb-4">Upload a JSON configuration file to update the system. You can apply changes temporarily or generate code for a permanent update.</p>

            <div className="mb-4">
                 <label htmlFor="file-upload" className={`${buttonStyle} cursor-pointer`}>
                    Select JSON File
                </label>
                <input id="file-upload" type="file" accept=".json,application/json" className="hidden" onChange={handleFileChange} />
                {fileName && <span className="ml-4 italic">{fileName}</span>}
            </div>

            {error && <p className="text-red-600 mb-2 font-bold">{error}</p>}
            
            <textarea
                value={jsonContent}
                onChange={(e) => setJsonContent(e.target.value)}
                placeholder="JSON content will be previewed here..."
                className={`${controlStyle} flex-grow resize-none font-mono text-xs min-h-[150px]`}
            />

            <div className="mt-4 flex justify-end gap-2">
                 <button 
                    onClick={handleGenerateCode} 
                    className={`${buttonStyle} bg-blue-500 text-white hover:bg-blue-400 disabled:bg-gray-400 disabled:cursor-not-allowed`}
                    disabled={!jsonContent || !!error}
                >
                    Generate `constants.ts`
                </button>
                <button 
                    onClick={handleApplyUpdate} 
                    className={`${buttonStyle} font-bold bg-green-500 hover:bg-green-400 disabled:bg-gray-400 disabled:cursor-not-allowed`}
                    disabled={!jsonContent || !!error}
                >
                    Apply & Overwrite
                </button>
            </div>

            {generatedCode && (
                <div className="mt-4 pt-4 border-t-2 border-gray-400">
                    <div className="flex justify-between items-center mb-2">
                        <h3 className="font-bold text-lg">Generated Code for `constants.ts`</h3>
                        <button onClick={handleCopyCode} className={buttonStyle}>Copy Code</button>
                    </div>
                    <p className="text-xs mb-2">You can now replace the entire contents of <strong>src/constants.ts</strong> with the code below.</p>
                    <textarea
                        readOnly
                        value={generatedCode}
                        className={`${controlStyle} flex-grow resize-none font-mono text-xs min-h-[200px] bg-gray-200`}
                    />
                </div>
            )}
        </div>
    );
};

export default UpdaterApp;